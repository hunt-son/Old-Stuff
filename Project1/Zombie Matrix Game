function field = fieldSetup(width, height, numMinions, minionSide)
% sets up the grid
% by creating an array to locate minions and zombies



% Basic Instructions:
%first create the grid,
%then define the points where the minions/ zombies will be located
%finally put the minions/ zombies in the grid 


field0 = zeros(height, width);   %zeros matrix
field0(:, :) = 'O';              %mark them with character 'o' for conversion into char

minion = 'M';
zombie = 'Z';
zombiePosX = ceil((height+1)/2);            %zombie placement
zombiePosY = ceil((width+1)/2);
field0(zombiePosX,zombiePosY) = zombie;     %put it in the field


%Calculate number of Spaces at start point
switch numMinions
    case 1  %if there's only 1 minion, I don't want to run to infinity 1/(num - 1)
        numSpacesBetweenMinions = 0; %so set it to 0
    otherwise
        numSpacesBetweenMinions = floor((width-numMinions)/(numMinions-1)); %given definition
end


% minions start position (north or south?)
switch minionSide       
    case 0               %south
        miniM = height;  %started at the bottom now we here
    case 1               %north
        miniM = 1;       %top of grid
end

miniN = 1;
field0(miniM, miniN) = minion;  %declare minion start positions
while numMinions > 1                              %put the rest of the minions on the grid
    miniN = 1 + miniN + numSpacesBetweenMinions;           
    field0(miniM,miniN) = minion;
    numMinions = numMinions - 1;                  % -1 so we get exact minion
end


field = char(field0);                %turn the field into characters
end

function [fieldOut, caught] = takeStep( minionInfo, zombieInfo, fieldIn )  
% this function takes a step for both minions and zombies
% the minions move together to the other side, and the zombie determines a
% stratedy to move

minion = 'M';
zombie = 'Z';

[rows, columns] = size(fieldIn); %gets fieldIn defined in an array

% where is everybody?
[minionRow, minionCol] = find(fieldIn == minion); %position of minion
[zombieInfo(1), zombieInfo(2)] = find(fieldIn == zombie); %position of zombie

% what about all the other spaces?
fieldIn(minionRow,minionCol) = 'O';

% this is how the minions should move
if minionInfo(2) == 1
    if minionInfo(1) >= 1                      % if minions are on the north end
        minionRow = minionRow - 1;             % move south in rows
    end
    fieldIn(minionRow, minionCol) = minion;    % output position
elseif minionInfo(2) == 1                      % if minions are on the south end
    if minionInfo(1) <= rows
        minionRow = minionRow - 1;             % move North in rows
    end
    fieldIn(minionRow, minionCol) = minion;    % output position
end


%Is the zombie enraged?
if zombieInfo(4) == 0       %If zombie is not enraged
    a = 1;             %move one step
else                   %if it is
    a = 2;             %move two steps
end


if fieldIn(minionRow,minionCol) == fieldIn(zombieInfo(1), zombieInfo(2));  %if minion and zombie positions are equal
    fieldIn(zombieInfo(1), zombieInfo(2)) = zombie;                        %determine that spot to be the zombie's spot
    caught = 1;   %tell run game zombie is caught
else
    caught = 0;   %do nothing
end


%remember cardinal directions are opposite to rows and columns
north = zombieInfo(1) - a;
south = zombieInfo(1) + a;
west = zombieInfo(2) - a;
east = zombieInfo(2) + a;


if zombieInfo(3) == 1                                                      % move east
    if east <= columns
        zombieInfo(2) = east;
        if 0 < zombieInfo(1) <= rows && 0 < east && east <= columns;
            fieldIn(zombieInfo(1), east) = zombie;
            zombieInfo(2) = east - a;
        end
    end        
elseif zombieInfo(3) == 2                                                  % move west
    if zombieInfo(2) >= 1
        zombieInfo(2) = west;
        if 0 < zombieInfo(1) <= rows && 0 < west && west <= columns
            fieldIn(zombieInfo(1), west) = zombie;
            zombieInfo(2) = west + a;
        end
    end
elseif zombieInfo(3) == 3
    if minionInfo(2) == 0                                                  % move northeast
        if north >= 1 && east <= columns     %meet boundaries
            fieldIn(north, east) = zombie;
            zombieInfo(1) = north + a;       %reset position
            zombieInfo(2) = east - a;
        end
    elseif minionInfo(2) == 1                                              % move southeast
        if south <= rows && east <= columns  %meet boundaries
            fieldIn(south, east) = zombie;
            zombieInfo(1) = south - a;       %reset position
            zombieInfo(2) = east - a;
        end    
    end
elseif zombieInfo(3) == 4                                                  % move kimye!!
    if minionInfo(2) == 0                                     %if minions move south
        if north >= 1 && west >= 1          %meet boundaries
            fieldIn(north, west) = zombie;
            zombieInfo(1) = north + a;      %reset position
            zombieInfo(2) = west + a;
        end
    elseif minionInfo(2) == 1                                              % move shitty airline
        if south <= rows && west >= 1       %meet boundaries  %if minions move north
            fieldIn(south, west) = zombie;
            zombieInfo(1) = south - a;      %reset position
            zombieInfo(2) = west + a;
        end    
    end
end

%%% note: position resets because I want to scratch it later in 'ise'

ise = fieldIn == zombie;                          % create an array of 1's where zombies are located
if sum(sum(ise)) == 2                             % if there's more than one zombie
    fieldIn(zombieInfo(1), zombieInfo(2)) = 'O';  % only keep the current one after takeStep
end



fieldOut = char(fieldIn);   %display field in characters

%%%%% not my code %%%%%% ONLY USED TO PLAY THE GAME. WRITTEN BY GSI

% This script file calls both fieldSetup and takeStep, allowing
% easy simulations of entire games of Zombies & Minions, with 
% multiple rounds per game. 

% Getting game parameters:
width = input('Width of the field (integer between 10 and 20, inclusive):  ');
height = input('Height of the field (integer between 20 and 40, inclusive):  ');
numMinions = input('Number of Minions (integer between 1 and 5, inclusive):  ');
minionSide = input('Starting side of field (1 for North -or- 0 for South):  ');
numRounds = input('Number of rounds in the game (any positive integer):  ');
zombieRage = input('Is the zombie enraged? (1 for true -or- 0 for false):  '); 

% calling fieldSetUp
fieldBefore = fieldSetup(width, height, numMinions, minionSide);

% get starting position of zombie for use at end of each round
[zombieStartRow, zombieStartCol] = find(fieldBefore == 'Z');

% Initialize minion direction to move away from current edge
minionDir = 1 - minionSide;

% Initialize default inputs for step function
minionInfo = zeros(1,2);
zombieInfo = [zeros(1,3), zombieRage];

% running entire game
for round = 1:numRounds
    % display results of the setup
    fprintf('\nBeginning of Round %d, field looks like: \n\n', round);
    disp(fieldBefore);

    %rotating zombieStrategy for each round -- how else could you
    %set zombieStrategy to change? (randomly, etc).
    zombieInfo(3) = mod(round, 4) + 1;
    
    % Set up starting row
    if minionSide == 1
        minionRow = 1;
    else
        minionRow = height;
    end
    
    % run a round in the game
    for step = 1:height-1
        % set up inputs to step function
        minionInfo(1) = minionRow;
        minionInfo(2) = minionDir;
        [zombieInfo(1), zombieInfo(2)] = find(fieldBefore == 'Z');
        % zombieInfo(3), zombie strategy, is set at the round level
        % zombieInfo(4), zombie rage, is set at the game level
        
        % call function to take a step
        [fieldAfter, caught] = takeStep(minionInfo, zombieInfo, fieldBefore);
        
        %display results of the step
        fprintf('\nAfter Round %d, Step %d, the field is:\n\n', round, step);
        disp(fieldAfter);        
        
        if caught
            fprintf('\n****  A minion was caught!  ****\n\n');
        end
        
        % update the row where the minion(s) are now located
        if minionDir == 1
            minionRow = minionRow - 1;
        else
            minionRow = minionRow + 1;
        end
        
        %make sure user wants to continue
        fprintf('\n');
        nextStep = input('Input the number 0 to quit or hit ENTER to continue:  ');
        
        if (nextStep == 0)
            break;
        else
            fieldBefore = fieldAfter;
        end
    end
    
    if (nextStep == 0)
        break;
    end
    
    fprintf('\n--------------------------------------------------\n');
    fprintf('\nEnd of Round %d\n', round);
    fprintf('\n--------------------------------------------------\n');
    
    % update the side and direction of the minions for the next round
    minionDir = minionSide;
    minionSide = 1 - minionSide;
    
    % move zombie back to the starting position (calculated by student)
    % after resetting its current position to an 'O'
    [zombieRow, zombieCol] = find(fieldBefore == 'Z');
    fieldBefore(zombieRow, zombieCol) = 'O';
    fieldBefore(zombieStartRow, zombieStartCol) = 'Z';
end

fprintf('\nGame Finished!\n\n');

