

function [ masked ] = maskImage( orig, mask )
% This function masks whatever matrix mask desires
% the declared values are quartered
masked = orig;

masked(:,:,1) = 0.25 * masked(mask == 0);
masked(:,:,2) = 0.25 * masked(mask == 0);
masked(:,:,3) = 0.25 * masked(mask == 0);

end

function [gray] = convertImageToGrayscale(orig)
% gray turns the picture on a grayscale
% the equation is already provided

gray = 0.299*orig(:,:,1) + 0.587*orig(:,:,2) + 0.114 * orig(:,:,3);

%equation is given

end


function [inverted] = invertImage(orig)
% this function inverts a picture
% - orig + 255 creates the inversion

inverted = 255 - orig;

end


function [ dimmed ] = dimImage( orig, new_max )
% Unit pixelizes each pixel
% multiplies by that ratio from given new_max

%Creates a ratio to dim each pixel
dimmed = new_max / 255;
%Does the dimming by that ration
dimmed = dimmed * orig;


end



function [weights] = gaussWeights(orig, window_size)
%

    % Determine neighbor pixel distances from center of window
    half = floor(window_size/2);
    [row_neighbors, col_neighbors] = meshgrid(-half:half, -half:half);
    
    % Set standard deviation, dependent on image size
    sigma = max(size(orig)) / (max(size(orig)) .* 0.75);
    
    % Generate blur kernel
    weights = 1 / (2*pi*sigma^2) .* ...
                exp(-(row_neighbors.^2 + col_neighbors.^2) / (2*sigma^2));
    
    % Normalize weights
    weights = weights ./ sum(weights(:));


end



function [ blurred ] = blurImage( orig, window_size )
% Takes a function and blurs it
% Averaging theorem rolls through function and calls GaussWeights

blurred = orig;
gWeights = gaussWeights(orig, window_size);

%create a square window size 'w'
columns = size(orig,2);
rows = size(orig,1);

%determine which is shorter
if columns < rows
    s = columns;
    p = rows;
else
    s = rows;
    p = columns;
end    
%start is the middle point in my 31 X 31 window
start = ceil(window_size / 2);


% For each dimension
for n = 1:3
    for w = 1:window_size:s
     %go through a window size in two dimensions 'window_size'
        for j = start:(window_size - start)
            for i = start:(window_size - start)
                % if window does not exceeds matrix dimensions                
                 % window starts counting at the positional average and ends 1 window
                 % size away
                    window = blurred(w + i - 1: window_size + i + w - 2, w + j - 1: window_size + w + j - 2);
                 % for each window, multiply every part of the matrix by its
                 % respective transformation in gWeights
                    b = window .* gWeights;
                    blurred(i,j,n) = sum(sum(b));                    
            end
        end
    end
end
