
#include <fstream>
#include <iostream>
#include <vector>
#include "printFunctions.h"

using namespace std;

//You will need to write these functions.
void readScores(vector< vector<double> > &scores);
void calcGrades(vector< vector<double> > &scores, vector<double> &grades);
void calcAverages(vector< vector<double> > &scores, vector<double> &averages);
vector<int> getFailing(vector<double> &grades);

int main()
{
    //Declare Variables:
    vector< vector<double> > scores;
    vector<double> grades, averages;
    vector<int> failing;
    
    //Call the function to read in the scores.
    readScores(scores);
    //For testing purposes you may wish to print scores here.
    //Uncomment the line below to do so.  Prints to "scoresTest.txt".
    //The output should look like "scores.txt" if correct.
    printScores(scores);
    
    //Call the function to calculate the overall grades.
    calcGrades(scores, grades);
    //Call the function to calculate the per-assignment averages.
    calcAverages(scores, averages);
    //Call the function to display the average grades.
    printAverages(averages);
    //Call the function to look for failing students.
    failing = getFailing(grades);
    //Call the function to print the failing grades.
    printFailing(failing);
    
}

/* Read in the scores just like lab 8.  This time though, store the 5 scores
 * for a student into a vector and then place that vector into the scores
 * vector. Such that for n students the scores vector should be n by 5.*/
void readScores(vector< vector<double> > &scores)
{
    //Declare variables
    double p1, p2, p3, e1, e2;
    int i, score;
    vector <double> test;
    //Open up "scores.txt"
    ifstream in("scores.txt");
    //Loop through all of the Lines.
    while(in >> p1 >> p2 >> p3 >> e1 >> e2){
    //Store each score for this student in a vector.
         test.push_back(p1);
         test.push_back(p2);
         test.push_back(p3);
         test.push_back(e1);
         test.push_back(e2);
    //Push Back that student onto scores.
         scores.push_back(test);
         test.clear();
    }
    //Close filestream.
    in.close();
}

/* From the vector of scores calculate each students grade and place it in
 * the vector of grades in its respective position. */
void calcGrades(vector< vector<double> > &scores, vector<double> &grades)
{
    //Loop through scores.
    int j=0;
    double grade = 0;
    for(int n=0; n<scores.size(); n++){
       for(j=0;j<5; j++){
          if (j<3)
             grade = ((scores[n][j]) * (40. / 75.)) + grade;
          else 
             grade = ((scores[n][j]) * (60./200.)) + grade;
       }
    //Push Back grades.
    grades.push_back(grade);
    grade = 0;
  }
}

/* For each of the assignments, calculate the average score and place it into
 * the averages vector.  Averages should be of length 5.*/
void calcAverages(vector< vector<double> > &scores, vector<double> &averages)
{
int a = 0;
double average = 0;
    while(a < 5){
     for(int b=0; b<scores.size(); b++){
      average = scores[b][a] + average;
     }
    average = average / (scores.size());
    averages.push_back(average);
    a++;
  }
}

/* This function takes in the vector of student grades and returns a vector
 * of the indices of students who are failing. */
vector<int> getFailing(vector<double> &grades)
{
    //Declare variables
    vector<int> failing;
    //Loop through grades
    for(int i=0; i<grades.size(); i++){
    //Check if the student is failing.
      if (grades.at(i) < 50) 
         failing.push_back(i);
    }
    //Return a vector of failing students.
    return failing;
}
